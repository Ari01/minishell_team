/*if have $   a = 3; */ 
/* 首位是“ ” 双引号 忽略所有双引号
            "$a" -> 3; 
            ""$a"" -> 3;
            """$a""" 不管几个双引号生效-> 3；
            """"$a"""" 不管几个双引号生效-> 3；
            有 ‘ ’时候 
                (单数）双引号时候 单引号不好使 显示所有单引号和数字
                "'$a'"  -> '3';
                "''$a''"  -> ''3'';
                "'''$a'''" -> '''3''';
                """'''$a''""" -> '''3''';
                （双数）双引号时候 双引号不好使 单引号看单双（单 显示$a)(双 显示3)
                ""'$a'""  单数单引号生效 ->$a
                ""''$a''"" 双数单引号失效 -> 3
                ""'''$a'''"" 单数单引号生效 ->$a
    首位是‘ ’ 单引号
            '$a' -> $a;
            ''$a'' -> 双数单引号失效 ->3;
            '''$a''' -> 单数单引号失效 ->$a;
            有 " " 时候
                (单数）单引号时候 单引号好使 显示所有双引号和$a
                '"$a"'                  -> "$a";
                '''"$a"'''              -> "$a" 
                '''""$a""'''            -> ""$a""
                （双数）单引号时候 单引号不好使 忽略单引号和双引号
                ''"$a"''            都显示一个        -> 3；
                ''''""$a""''''      都显示一个-> 3；
                ''''"""$a"""''''    都显示一个-> 3；
    特殊还没弄
 */
e"ch"o bonjour bonjour

** - find out if a 引号 has been found already
** - find out which type of 引号 has already been found
** - find out which 引号 was the first and has to be closed
** - find out if a 引号 has to be closed
** - 找出是否已经找到引号
** 找出已经找到哪种类型的引号
** - 找出哪个引号是第一个并且必须关闭
** - 找出引号是否必须关闭
/* normal
    只有 ‘ ’ 或者只有 “ ” 不影响 只显示值
         """"""""""""""""""s"""""""""""""""""""" ->s
         ''''''''''''''''''s'''''''''''''''''''' ->s
    混合 
        》》》》第一位是 !!!!!(单数) 单数双引号或者单数单引号都去掉 都直接显示（所有数量的）其他引号
        最前面 "单数双引号 ，单引号在双引号中失去意义，去掉双引号 直接显示单引号"
                "s" -> s
                "'s'" -> 's'; 
                """'s'""" -> 's';
                特殊 "单数双引号，单引号在双引号中失去意义， 直接显示单引号(不考虑出现多少遍双引号）"
                "'"s"'"  -> 's';
                "'""s""'"  -> 's';
                "'""'s'""'"  -> ''s'';
                "''""'s'""''"  -> '''s''';
                "''''s"'''' -> ''''s;   //确认闭上的位置
        最前面是 "单数单引号  双引号失去意义 去掉单引号 直接显示双引号"
                's' -> s;
                '"s"' -> "s";
                '''""s""''' -> ""s""
                特殊 "单数单引号 双引号失去意义 直接显示双引号(不考虑出现多少遍单引号）"
                '"'s'"' -> "s";
                '""'s'""'  -> ""s""; 
                '""''s''""' -> ""s""; 
                '"""'s'"""'  -> """s""" 
                
        》》》》第一位是 !!!!!(双数)。不管几个混合都是双数#######引号全都去掉
        最前面是 "双数双引号 ，去掉所有， 去掉双引号 ，去掉单引号"
                ""s""  ->s;
                ""'s'"" -> s;
                """"'s'"""" -> s;
                ""''s''"" -> s;
                """"s''''-> s;
                “双数单引号 , 去掉双引号. 去掉单引号”  
                ''''""""""""""s""""""""""'''' -> s;

        》》》》第一位是 !!!!!(双数)不管单双 混合 遵循 
                “全是双数（最内是单）引号都去掉” 
                “中间有单 保留从外开始第一个单数开始之后引号和字符（不管是不是 最内）”
                ""'"s"'"" -> "s"
                ""''"s"''""  -> s  
                ""''""s""''""  -> s 
                ""'''"""s"""'''""  -> """s"""; 
                ""'''"""'''s'''"""'''"" -> """s""";
                ""'''""""''s''""""'''"" -> """"s"""";
                ''"'s'"'' -> 's'
                ''""'s'""'' 2个双引号中间‘’不留 -> s 
                ''"""''s''"""'' 单数（3）双引号‘’全留-> ''s''
                ''"'s'" -> 's';
                
                c'o''u'cou  ->coucou
                echo co'c"o"u' ->coc"o"u
                echo "ho" bon"j'o'u"r -> ho bonj'o'ur
                echo "ho" 'bon'j'o'ur -> ho bonjour
                echo "ho"'bon'j'o'ur -> hobonjour
                echo "ho" "'bon'j'o'ur" -> ho 'bon'j'o'ur
                echo "ho"bon"jo"u"r" ->hobonjour
                "ec""""h"o"" "j"'e''''ll'"o" "w"'o''r''l'''"d"  ->jello world

                echo "hello world!" | 'echo' "wd " > e"cho" 1123 | echo s2e23  

*/
/*
char	*ft_strchr(const char *s, int c)
返回 从 c 开始的字符串
char	*ft_strjoin(char const *s1, char const *s2)
char	*ft_substr(char const *s, unsigned int start, size_t len)
这个新字符串从 '第几位start' 索引开始，并且   具有最大尺寸“len”



单引号：所见即所得

双引号：所见非所得，它会先把变量解析之后，再输出

不使用引号定义字符串时，字符串不能包含空白字符（如Space或Tab），需要该加引号